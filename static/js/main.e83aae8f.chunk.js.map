{"version":3,"sources":["configs/settings.jsx","mapgen/mapPresenter.js","store/mapSelectors.js","UI/UI.js","assets/sounds/sfx/Step.mp3","assets/sounds/sfx/FightSound.mp3","assets/sounds/sfx/OpenPotion.mp3","assets/sounds/sfx/DrinkPotion.mp3","assets/sounds/background/Leaving-For-Valhalla(AlexanderNakarada).mp3","bin/playSound.js","Header.jsx","store/action-types.js","windows/fightWindow.js","windows/gameOverWindow.js","App.jsx","mapgen/map-generator.js","bin/entities-types.js","store/gameReducer.js","store/store.js","index.js"],"names":["DIRECTIONS","DIMENSIONS","Cell","cell","cellColumn","className","getClassName","MapPresenter","mapField","useSelector","state","map","obj","row","obj2","col","selectFightingMob","mobId","player","fightingWith","mobs","find","mob","id","selectPlayer","UI","health","dmg","score","TimeOut","useRef","playWalkSoundWD","clearTimeout","current","setTimeout","Audio","walkSound","play","Header","useState","disable","setDisable","type","colorHandler","disabled","onClick","backMusic","ACTIONS","FIGHT_VARIANTS","GAME_STATUS","FightWindow","dispatch","useDispatch","aDisable","setADisable","payload","fightSound","openPotion","drinkPotion","GameOverWindow","App","status","upArrow","downArrow","leftArrow","rightArrow","useKey","event","includes","key","createGrid","num","dimensions","grid","y","push","x","createMap","randomDirection","maxTunnels","maxLength","currentRow","Math","floor","random","currentColumn","directions","lastDirection","length","randomLength","ceil","tunnelLength","entitiesTypes","tile","healthRegen","enemy","initMobs","initialState","mapWithEntities","getRandomPlayerSpawn","mobIndex","getRandomMobSpawn","getRandomSpawnEntities","mapUpdate","direction","workingField","copyField","playerPos","playerFinder","newPlayerPos","getNextPosition","checkWallCollision","getEnemyID","checkMobCollision","coords","console","log","getMobIdByCoordinates","column","newField","isSpawned","getRandomTile","initMapAndMobs","getRandomMobSpawnCoords","min","max","editedField","mobCount","getRandomNumber","mC","nanoid","copiedField","rootReducer","combineReducers","action","enemyId","mobKilled","filter","Boolean","mapAndMobs","newMap","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e83aae8f.chunk.js","sourcesContent":["export const SPRITE_SIZE = 32;\r\nexport const SCREEN_WIDTH = SPRITE_SIZE * 25;\r\nexport const SCREEN_HEIGHT = SPRITE_SIZE * 25;\r\n\r\nexport const FLOOR_TILE = 0;\r\nexport const WALL_TILE = 1;\r\nexport const PLAYER_TILE = 2;\r\nexport const ENEMY_TILE = 3;\r\n\r\nexport const DIRECTIONS = {\r\n    RIGHT: 'Right',\r\n    LEFT: 'Left',\r\n    DOWN: 'Down',\r\n    UP: 'Up'\r\n};\r\n\r\n// settings for generation\r\nexport const DIMENSIONS = 32;\r\nexport const MAX_TUNNELS = 150;\r\nexport const MAX_LENGTH = 8;\r\n\r\n","import { ENEMY_TILE, PLAYER_TILE, WALL_TILE } from '../configs/settings';\r\nimport { useSelector } from 'react-redux';\r\nimport './map_design.css';\r\n\r\nfunction Cell({ cell, cellColumn }) {\r\n  function getClassName(cell) {\r\n    switch (cell) {\r\n      case WALL_TILE:\r\n        return 'wall';\r\n      case PLAYER_TILE:\r\n        return 'player';\r\n      case ENEMY_TILE:\r\n        return 'mob';\r\n      default:\r\n        return 'tunnel';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <td className={getClassName(cell)} key={cellColumn}>\r\n      {' '}\r\n    </td>\r\n  );\r\n}\r\n\r\nexport default function MapPresenter() {\r\n  const mapField = useSelector(state => state.map.map);\r\n  return (\r\n    <div className='map-container'>\r\n      <table className='grid nes-container is-dark'>\r\n        <thead>\r\n        {mapField.map((obj, row) => (\r\n          <tr key={row}>\r\n            {obj.map((obj2, col) => (\r\n              <Cell cell={obj2} cellColumn={col} key={col} />\r\n            ))}\r\n          </tr>\r\n        ))}\r\n        </thead>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","export function selectFightingMob(state) {\r\n    const mobId = state.map.player.fightingWith;\r\n    return state.map.mobs.find(mob => mob.id === mobId);\r\n}\r\n\r\nexport function selectPlayer(state) {\r\n    return state.map.player;\r\n}\r\n","import React from 'react';\r\nimport MapPresenter from '../mapgen/mapPresenter';\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectPlayer} from \"../store/mapSelectors\";\r\nimport './UI.css'\r\n\r\nfunction UI() {\r\n  const player = useSelector(selectPlayer)\r\n    return (\r\n        <div className='UI-container'>\r\n          <div className='stats-container nes-container is-dark with-title'>\r\n            <p className='title'>Statistics</p>\r\n            <tbody className='nes-table is-dark'>\r\n              <tr className ='hp'> <th>HP </th><th>{player.health}</th>  </tr>\r\n              <tr className ='ad'> <th>AD </th><th>{player.dmg}</th> </tr>\r\n              <tr className ='gc'> <th>GC </th><th>{player.score}</th> </tr>\r\n            </tbody>\r\n          </div>\r\n          <div className='game-container'>\r\n            <MapPresenter />\r\n          </div>\r\n          <div className='inventory-container nes-container is-dark with-title'>\r\n            <p className='title'>Inventory</p>\r\n          </div>\r\n          <div className='dialog-container nes-container is-dark with-title'>\r\n            <p className='title'>Dialogs and quests</p>\r\n            <p>Work In Progress</p>\r\n          </div>\r\n          <div className='character-container nes-container is-dark'></div>\r\n          <div className='tips-container nes-container is-dark'></div>\r\n        </div>\r\n    );\r\n}\r\nexport default UI;\r\n","export default __webpack_public_path__ + \"static/media/Step.c2439e20.mp3\";","export default __webpack_public_path__ + \"static/media/FightSound.34398866.mp3\";","export default __webpack_public_path__ + \"static/media/OpenPotion.00a24de6.mp3\";","export default __webpack_public_path__ + \"static/media/DrinkPotion.6913b4bd.mp3\";","export default __webpack_public_path__ + \"static/media/Leaving-For-Valhalla(AlexanderNakarada).5b4d6299.mp3\";","import React, {useRef} from \"react\";\r\nimport walkSound from '../assets/sounds/sfx/Step.mp3';\r\nimport fightSound from '../assets/sounds/sfx/FightSound.mp3';\r\nimport openPotion from '../assets/sounds/sfx/OpenPotion.mp3';\r\nimport drinkPotion from '../assets/sounds/sfx/DrinkPotion.mp3';\r\nimport backMusic from '../assets/sounds/background/Leaving-For-Valhalla(AlexanderNakarada).mp3';\r\n\r\nconst playWalkSound = () => {\r\n  new Audio(walkSound).play();\r\n}\r\n\r\nexport const playFightSound = () => {\r\n  new Audio(fightSound).play();\r\n}\r\nexport const playHealSound = () => {\r\n  new Audio(openPotion).play();\r\n  setTimeout(() => {\r\n    new Audio(drinkPotion).play();\r\n  }, 100);\r\n}\r\n\r\nfunction TimeOut () {\r\n  const SoundTimeout = useRef(null);\r\n  return SoundTimeout\r\n}\r\n\r\nexport const playWalkSoundWD = () => {\r\n  clearTimeout(TimeOut.current);\r\n  TimeOut.current = setTimeout(() => {\r\n    playWalkSound();\r\n  }, 100);\r\n};\r\n\r\nexport const playBackgroundMusic = () => {\r\n  new Audio(backMusic).play();\r\n}\r\n","import React, {useState} from 'react';\r\nimport {playBackgroundMusic} from \"./bin/playSound\";\r\n\r\nexport default function Header() {\r\n  const [disable, setDisable] = useState(true);\r\n\r\n  function colorHandler(disable) {\r\n    return disable ? 'is-normal' : 'is-disabled';\r\n  }\r\n\r\n    return (\r\n        <div className=\"header nes-container is-dark with-title\">\r\n            <p className=\"title\">ReactReduxRPG</p>\r\n            <p>Good luck, Stranger.</p>\r\n          <button\r\n            type=\"button\"\r\n            className={\"nes-btn\" + ' ' + colorHandler(disable)}\r\n            disabled={!disable}\r\n            onClick={()=> {\r\n              playBackgroundMusic();\r\n              setDisable(!disable);\r\n            }}\r\n          >Music\r\n          </button>\r\n\r\n        </div>\r\n    );\r\n};\r\n","export const ACTIONS = {\r\n    MOVE_CH: 'MOVE_CH',\r\n    FIGHT_ACTION: 'FIGHT_ACTION',\r\n    HEAL_ACTION: 'DEFEND_ACTION',\r\n    RESET: 'RESET',\r\n    NEXT_LEVEL: 'NEXT_LEVEL'\r\n};\r\n\r\nexport const FIGHT_VARIANTS = {\r\n    ATTACK: 'ATTACK',\r\n    DEFEND: 'DEFEND',\r\n    PARRY: 'PARRY',\r\n    RUNNING: 'RUNNING'\r\n};\r\n\r\nexport const GAME_STATUS = {\r\n    PLAYER_WANDER: 2,\r\n    PLAYER_FIGHTING: 1,\r\n    PLAYER_DIED: 0\r\n};","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './fightWindow.css';\r\nimport 'nes.css/css/nes.css';\r\nimport { selectFightingMob, selectPlayer } from '../store/mapSelectors';\r\nimport { FIGHT_VARIANTS } from '../store/action-types';\r\nimport {playFightSound, playHealSound} from \"../bin/playSound\";\r\n\r\nexport default function FightWindow() {\r\n    const mob = useSelector(selectFightingMob);\r\n    const dispatch = useDispatch();\r\n    const player = useSelector(selectPlayer);\r\n    const [disable, setDisable] = useState(true);\r\n    const [aDisable, setADisable] = useState(true);\r\n\r\n    function colorHandler(disable) {\r\n        return disable ? 'is-normal' : 'is-disabled';\r\n    }\r\n    return (\r\n        <div className=\"fhtWindow\">\r\n            <button\r\n                type=\"button\"\r\n                className={\"nes-btn is-primary\"}\r\n                disabled={!aDisable}\r\n                onClick={() => {\r\n                    dispatch({\r\n                        type: 'FIGHT_ACTION',\r\n                        payload: FIGHT_VARIANTS.ATTACK\r\n                    });\r\n                    playFightSound();\r\n                    setADisable(!aDisable);\r\n                    setTimeout( ()=>  {\r\n                      setADisable(aDisable)\r\n                    },500);\r\n                }}\r\n            >\r\n                Attack\r\n            </button>\r\n            <button\r\n                type=\"button\"\r\n                className={'nes-btn' + ' ' + colorHandler(disable)}\r\n                disabled={!disable}\r\n                onClick={() => {\r\n                    dispatch({\r\n                        type: 'DEFEND_ACTION',\r\n                        payload: FIGHT_VARIANTS.DEFEND\r\n                    });\r\n                    setDisable(!disable);\r\n                    playHealSound();\r\n                }}\r\n            >\r\n                Drink Healing Potion\r\n            </button>\r\n            <br />\r\n            <span className=\"nes-text is-disabled\">Enemy HP:{mob.health} DMG:2</span>\r\n            <br />\r\n            <span className=\"nes-text is-disabled\">\r\n                PLayer HP:{player.health} DMG:{player.dmg}\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './gameOverWindow.css';\r\nimport 'nes.css/css/nes.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport { ACTIONS } from '../store/action-types';\r\n\r\nexport default function GameOverWindow() {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"gameOver\">\r\n            <button\r\n                type=\"button\"\r\n                className=\"nes-btn is-error\"\r\n                onClick={() => dispatch({ type: ACTIONS.RESET })}\r\n            >\r\n                Restart{' '}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useKey } from 'react-use';\r\nimport './App.css';\r\nimport UI from './UI/UI';\r\nimport Header from './Header';\r\nimport { DIRECTIONS } from './configs/settings';\r\nimport { ACTIONS } from './store/action-types';\r\nimport FightWindow from './windows/fightWindow';\r\nimport GameOverWindow from './windows/gameOverWindow';\r\nimport { GAME_STATUS } from './store/action-types';\r\nimport { playWalkSoundWD } from \"./bin/playSound\";\r\nimport StartWindow from \"./windows/startWindow\";\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch();\r\n    const status = useSelector(state => state.map.status);\r\n    const upArrow = ['ц','w', 'W', 'ArrowUp'];\r\n    const downArrow = ['ы','s', 'S', 'ArrowDown'];\r\n    const leftArrow = ['ф','a', 'A', 'ArrowLeft'];\r\n    const rightArrow = ['в','d', 'D', 'ArrowRight'];\r\n\r\n    useKey(\r\n        event => upArrow.includes(event.key),\r\n        () => {\r\n            dispatch({ type: ACTIONS.MOVE_CH, payload: DIRECTIONS.UP });\r\n            playWalkSoundWD();\r\n        }\r\n    );\r\n    useKey(\r\n        event => downArrow.includes(event.key),\r\n        () => {\r\n            dispatch({ type: ACTIONS.MOVE_CH, payload: DIRECTIONS.DOWN });\r\n            playWalkSoundWD();\r\n        }\r\n    );\r\n    useKey(\r\n        event => leftArrow.includes(event.key),\r\n        () => {\r\n            dispatch({ type: ACTIONS.MOVE_CH, payload: DIRECTIONS.LEFT });\r\n            playWalkSoundWD();\r\n        }\r\n    );\r\n    useKey(\r\n        event => rightArrow.includes(event.key),\r\n        () => {\r\n            dispatch({ type: ACTIONS.MOVE_CH, payload: DIRECTIONS.RIGHT });\r\n            playWalkSoundWD();\r\n        }\r\n    );\r\n\r\n    return (\r\n      <body className='window'>\r\n        <Header />\r\n        <UI />\r\n        {status === GAME_STATUS.PLAYER_DIED && <GameOverWindow />}\r\n        {status === GAME_STATUS.PLAYER_FIGHTING && <FightWindow />}\r\n      </body>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { WALL_TILE } from '../configs/settings';\r\nimport { DIMENSIONS, MAX_LENGTH, MAX_TUNNELS } from '../configs/settings';\r\n\r\n//creating field with parameters from config/settings.js\r\nexport function createGrid(num, dimensions) {\r\n  let grid = [];\r\n  for (let y = 0; y < dimensions; y++) {\r\n    grid.push([]);\r\n    for (let x = 0; x < dimensions; x++) {\r\n      grid[y].push(num);\r\n    }\r\n  }\r\n  return grid;\r\n}\r\n\r\nexport function createMap(\r\n  dimensions = DIMENSIONS,\r\n  maxTunnels = MAX_TUNNELS,\r\n  maxLength = MAX_LENGTH\r\n)\r\n{\r\n  let map = createGrid(WALL_TILE, dimensions),\r\n    currentRow = Math.floor(Math.random() * dimensions),\r\n    currentColumn = Math.floor(Math.random() * dimensions),\r\n    directions = [\r\n      [-1, 0],\r\n      [1, 0],\r\n      [0, -1],\r\n      [0, 1]\r\n    ],\r\n    lastDirection = [],\r\n    randomDirection;\r\n\r\n  while (maxTunnels && dimensions && maxLength) {\r\n    //choosing directions to generate\r\n    do {\r\n      randomDirection = directions[Math.floor(Math.random() * directions.length)];\r\n    } while (\r\n      (randomDirection[0] === -lastDirection[0] &&\r\n        randomDirection[1] === -lastDirection[1]) ||\r\n      (randomDirection[0] === lastDirection[0] && randomDirection[1] === lastDirection[1])\r\n      );\r\n\r\n    let randomLength = Math.ceil(Math.random() * maxLength),\r\n      tunnelLength = 0;\r\n\r\n    //cycle generating passes\r\n    while (tunnelLength < randomLength) {\r\n\r\n      if (\r\n        (currentRow === 0 && randomDirection[0] === -1) ||\r\n        (currentColumn === 0 && randomDirection[1] === -1) ||\r\n        (currentRow === dimensions - 1 && randomDirection[0] === 1) ||\r\n        (currentColumn === dimensions - 1 && randomDirection[1] === 1)\r\n      ) {\r\n        break;\r\n      } else {\r\n        map[currentRow][currentColumn] = 0;\r\n        currentRow += randomDirection[0];\r\n        currentColumn += randomDirection[1];\r\n        tunnelLength++;\r\n      }\r\n    }\r\n    //stopper of generator\r\n    //stops tunnel generation when it reaches the maximum length value\r\n    if (tunnelLength) {\r\n      lastDirection = randomDirection;\r\n      maxTunnels--;\r\n    }\r\n  }\r\n  return map;\r\n}\r\n","const minHpRegen = 10;\r\nconst maxHpRegen = 40;\r\n\r\nexport const entitiesTypes = {\r\n  player: {\r\n    tile: \"PLAYER_TILE\",\r\n    healthRegen: minHpRegen + Math.floor(Math.random() * (maxHpRegen - minHpRegen)),\r\n    health: 20,\r\n    dmg: 4,\r\n    score: 0,\r\n    fightingWith: null\r\n  },\r\n  enemy: {\r\n    tile: \"ENEMY_TILE\",\r\n    id: 0,\r\n    health: 20,\r\n    dmg: 0,\r\n  }\r\n}\r\n","import { nanoid } from 'nanoid';\r\nimport { createMap } from '../mapgen/map-generator';\r\nimport { DIMENSIONS } from '../configs/settings';\r\nimport { DIRECTIONS, ENEMY_TILE, FLOOR_TILE, PLAYER_TILE, WALL_TILE } from '../configs/settings';\r\nimport {ACTIONS, GAME_STATUS} from './action-types';\r\nimport { entitiesTypes } from \"../bin/entities-types\";\r\n\r\n\r\n\r\nconst mobs = initMobs();\r\n\r\nconst initialState = {\r\n    map: initField(),\r\n    player: initPlayer(),\r\n    status: initStatus(),\r\n    mobs\r\n};\r\n\r\n//work w/ player\r\nfunction initPlayer() {\r\n    const playerActor = entitiesTypes.player;\r\n    return playerActor;\r\n}\r\n\r\nfunction initStatus() {\r\n    return GAME_STATUS.PLAYER_WANDER;\r\n}\r\n\r\nfunction mapUpdate(map, direction) {\r\n    const workingField = copyField(map);\r\n    // найти позицию игрока\r\n    const playerPos = playerFinder(workingField);\r\n    // вычислить следующую позицию\r\n    const newPlayerPos = getNextPosition(playerPos, direction);\r\n    if (!checkWallCollision(workingField, newPlayerPos)) {\r\n        workingField[playerPos.x][playerPos.y] = FLOOR_TILE;\r\n        workingField[newPlayerPos.x][newPlayerPos.y] = PLAYER_TILE;\r\n    }\r\n    return workingField;\r\n}\r\n\r\nexport function getEnemyID(state, direction) {\r\n    const playerPos = playerFinder(state.map);\r\n    const newPlayerPos = getNextPosition(playerPos, direction);\r\n    if (checkMobCollision(state.map, newPlayerPos)) {\r\n        return getMobIdByCoordinates(state, newPlayerPos);\r\n    }\r\n}\r\n\r\nfunction getMobIdByCoordinates(state, coords) {\r\n    console.log(state.mobs);\r\n    for (let mob of state.mobs) {\r\n        if (mob.x === coords.x && mob.y === coords.y) {\r\n            return mob.id;\r\n        }\r\n    }\r\n}\r\n\r\nexport function checkWallCollision(map, playerPos) {\r\n    if (\r\n        playerPos.x >= DIMENSIONS ||\r\n        playerPos.x < 0 ||\r\n        playerPos.y >= DIMENSIONS ||\r\n        playerPos.y < 0\r\n    )\r\n        return true;\r\n    return map[playerPos.x][playerPos.y] === WALL_TILE;\r\n}\r\n\r\nexport function checkMobCollision(map, playerPos) {\r\n    if (\r\n        playerPos.x >= DIMENSIONS ||\r\n        playerPos.x < 0 ||\r\n        playerPos.y >= DIMENSIONS ||\r\n        playerPos.y < 0\r\n    )\r\n        return true;\r\n\r\n    return map[playerPos.x][playerPos.y] === ENEMY_TILE;\r\n}\r\n\r\nexport function mobFinder(workingField) {\r\n    let x, y;\r\n    for (let row = 0; row < workingField.length; row++) {\r\n        for (let column = 0; column < workingField[row].length; column++) {\r\n            if (workingField[row][column] === ENEMY_TILE) {\r\n                x = row;\r\n                y = column;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return { x, y };\r\n}\r\n\r\nexport function playerFinder(workingField) {\r\n    let x, y;\r\n    for (let row = 0; row < workingField.length; row++) {\r\n        for (let column = 0; column < workingField[row].length; column++) {\r\n            if (workingField[row][column] === PLAYER_TILE) {\r\n                x = row;\r\n                y = column;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return { x, y };\r\n}\r\n\r\nfunction getNextPosition(playerPos, direction) {\r\n    switch (direction) {\r\n        case DIRECTIONS.UP:\r\n            return { x: playerPos.x - 1, y: playerPos.y };\r\n        case DIRECTIONS.DOWN:\r\n            return { x: playerPos.x + 1, y: playerPos.y };\r\n        case DIRECTIONS.LEFT:\r\n            return { x: playerPos.x, y: playerPos.y - 1 };\r\n        case DIRECTIONS.RIGHT:\r\n            return { x: playerPos.x, y: playerPos.y + 1 };\r\n        default:\r\n            return playerPos;\r\n    }\r\n}\r\n\r\nfunction getRandomPlayerSpawn(map) {\r\n    const newField = copyField(map);\r\n    let x, y;\r\n    let isSpawned = false;\r\n    do {\r\n        x = getRandomTile(0, DIMENSIONS);\r\n        y = getRandomTile(0, DIMENSIONS);\r\n        if (newField[x][y] !== WALL_TILE) {\r\n            isSpawned = true;\r\n        }\r\n    } while (!isSpawned);\r\n\r\n    newField[x][y] = PLAYER_TILE;\r\n    return newField;\r\n}\r\n\r\n//work w/ map\r\nexport function initField() {\r\n    const map = createMap();\r\n    const mapWithEntities = getRandomSpawnEntities(map);\r\n    return mapWithEntities;\r\n}\r\n\r\n/**\r\n * 1. Сгенерировать карту. +\r\n * 2. Генерим массив мобов. +\r\n * 3. Для моба находим место.\r\n *    3.1. Прописываем координаты в моба. +\r\n *    3.2. Меняем клетку на карте. +\r\n * 4. Возвращаем карту и мобов. +\r\n */\r\nfunction initMapAndMobs() {\r\n    const mobs = initMobs();\r\n    let map = createMap();\r\n    map = getRandomPlayerSpawn(map); // player placement\r\n\r\n    for (let mob of mobs) {\r\n        const { x, y } = getRandomMobSpawnCoords(map);\r\n        map[x][y] = ENEMY_TILE;\r\n        mob.x = x;\r\n        mob.y = y;\r\n    }\r\n\r\n    return { mobs, map };\r\n}\r\n\r\nfunction getRandomTile(min = DIMENSIONS, max = DIMENSIONS) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\nfunction copyField(map) {\r\n    let editedField = [...map];\r\n    for (let x = 0; x < editedField.length; x++) {\r\n        editedField[x] = [...editedField[x]];\r\n    }\r\n    return editedField;\r\n}\r\n\r\n//creating enemies\r\nfunction initMobs() {\r\n    const mobs = [];\r\n    const minHp = 10;   const maxHp = 35;\r\n    const min = 1;   const max = 4;\r\n    let mobCount = getRandomNumber(2, 5);\r\n    for (let mC = 0; mC < mobCount; mC++) {\r\n        mobs.push({\r\n            id: nanoid(),\r\n            health: Math.floor(Math.random() * (maxHp - minHp + 1)),\r\n            dmg: Math.floor(Math.random() * (max - min + 1) + min)\r\n        });\r\n    }\r\n\r\n    return mobs;\r\n}\r\n\r\n//generating number of enemies\r\nfunction getRandomNumber(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n\r\nexport function getRandomMobSpawn(map, mob) {\r\n    const copiedField = copyField(map);\r\n    let x, y;\r\n    let isSpawned = false;\r\n    do {\r\n        x = getRandomTile(0, DIMENSIONS);\r\n        y = getRandomTile(0, DIMENSIONS);\r\n        if (copiedField[x][y] === FLOOR_TILE) {\r\n            isSpawned = true;\r\n        }\r\n    } while (!isSpawned);\r\n\r\n    copiedField[x][y] = ENEMY_TILE;\r\n\r\n    mob.x = x;\r\n    mob.y = y;\r\n    return copiedField;\r\n}\r\n\r\n//random coords of enemy spawn\r\nexport function getRandomMobSpawnCoords(map) {\r\n    const copiedField = copyField(map);\r\n    let x, y;\r\n    let isSpawned = false;\r\n    do {\r\n        x = getRandomTile(0, DIMENSIONS);\r\n        y = getRandomTile(0, DIMENSIONS);\r\n        if (copiedField[x][y] === FLOOR_TILE) {\r\n            isSpawned = true;\r\n        }\r\n    } while (!isSpawned);\r\n    return { x, y };\r\n}\r\n\r\n// map with all entities includes player\r\nfunction getRandomSpawnEntities(map) {\r\n    let mapWithEntities = getRandomPlayerSpawn(map);\r\n    for (let mobIndex = 0; mobIndex < mobs.length; mobIndex++) {\r\n        mapWithEntities = getRandomMobSpawn(mapWithEntities, mobs[mobIndex]);\r\n    }\r\n    return mapWithEntities;\r\n}\r\n\r\nexport default function reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case ACTIONS.MOVE_CH:\r\n            if (state.status !== GAME_STATUS.PLAYER_WANDER) return state;\r\n            const enemyId = getEnemyID(state, action.payload);\r\n            if (enemyId) {\r\n                return {\r\n                    ...state,\r\n                    status: GAME_STATUS.PLAYER_FIGHTING,\r\n                    player: {\r\n                        ...state.player,\r\n                        fightingWith: enemyId\r\n                    }\r\n                };\r\n            }\r\n            return {\r\n                ...state,\r\n                map: mapUpdate(state.map, action.payload)\r\n            };\r\n        case ACTIONS.FIGHT_ACTION:\r\n            if (state.status !== GAME_STATUS.PLAYER_FIGHTING) return state;\r\n            let mobKilled;\r\n            const mobs = state.mobs\r\n                .map(mob => {\r\n                    if (mob.id === state.player.fightingWith) {\r\n                        if (mob.health > state.player.dmg)\r\n                            return { ...mob, health: mob.health - state.player.dmg };\r\n                        else {\r\n                            mobKilled = mob;\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return mob;\r\n                })\r\n                .filter(Boolean);\r\n\r\n            if (mobs.length === 0) {\r\n                const mapAndMobs = initMapAndMobs();\r\n                return {\r\n                    ...state,\r\n                    mobs: mapAndMobs.mobs,\r\n                    map: mapAndMobs.map,\r\n                    status: GAME_STATUS.PLAYER_WANDER\r\n                };\r\n            }\r\n\r\n            if (mobKilled) {\r\n                const newMap = copyField(state.map);\r\n                newMap[mobKilled.x][mobKilled.y] = FLOOR_TILE;\r\n\r\n                return {\r\n                    ...state,\r\n                    map: newMap,\r\n                    mobs,\r\n                    player: {\r\n                        ...state.player,\r\n                        fightingWith: null,\r\n                        score: state.player.score + getRandomNumber(1, 25)\r\n                    },\r\n                    status: GAME_STATUS.PLAYER_WANDER\r\n                };\r\n            }\r\n\r\n            if (state.player.health - entitiesTypes.enemy.dmg <= 0) {\r\n                return {\r\n                    ...state,\r\n                    status: GAME_STATUS.PLAYER_DIED\r\n                };\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                mobs,\r\n                player: {\r\n                    ...state.player,\r\n                    health: state.player.health - entitiesTypes.enemy.dmg\r\n                }\r\n            };\r\n\r\n        case ACTIONS.HEAL_ACTION:\r\n            if (state.status !== GAME_STATUS.PLAYER_FIGHTING) return state;\r\n            return {\r\n                ...state,\r\n                player: {\r\n                    ...state.player,\r\n                    health: state.player.health + state.player.healthRegen\r\n                }\r\n            };\r\n        case ACTIONS.NEXT_LEVEL:\r\n            return state;\r\n\r\n        case ACTIONS.RESET:\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers, createStore } from 'redux';\r\nimport Reducer from './gameReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    map: Reducer\r\n});\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}